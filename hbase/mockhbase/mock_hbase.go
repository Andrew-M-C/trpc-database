// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go

// Package mockhbase is a generated GoMock package.
package mockhbase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hrpc "github.com/tsuna/gohbase/hrpc"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockClient) Get(ctx context.Context, table, rowKey string, family map[string][]string) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, table, rowKey, family)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientMockRecorder) Get(ctx, table, rowKey, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), ctx, table, rowKey, family)
}

// Put mocks base method
func (m *MockClient) Put(ctx context.Context, table, rowKey string, value map[string]map[string][]byte) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, table, rowKey, value)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockClientMockRecorder) Put(ctx, table, rowKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), ctx, table, rowKey, value)
}

// Del mocks base method
func (m *MockClient) Del(ctx context.Context, table, rowKey string, value map[string]map[string][]byte) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, table, rowKey, value)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockClientMockRecorder) Del(ctx, table, rowKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockClient)(nil).Del), ctx, table, rowKey, value)
}

// RawGet mocks base method
func (m *MockClient) RawGet(ctx context.Context, get *hrpc.Get) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawGet", ctx, get)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawGet indicates an expected call of RawGet
func (mr *MockClientMockRecorder) RawGet(ctx, get interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawGet", reflect.TypeOf((*MockClient)(nil).RawGet), ctx, get)
}

// RawPut mocks base method
func (m *MockClient) RawPut(ctx context.Context, put *hrpc.Mutate) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawPut", ctx, put)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawPut indicates an expected call of RawPut
func (mr *MockClientMockRecorder) RawPut(ctx, put interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawPut", reflect.TypeOf((*MockClient)(nil).RawPut), ctx, put)
}

// RawDel mocks base method
func (m *MockClient) RawDel(ctx context.Context, del *hrpc.Mutate) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDel", ctx, del)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawDel indicates an expected call of RawDel
func (mr *MockClientMockRecorder) RawDel(ctx, del interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDel", reflect.TypeOf((*MockClient)(nil).RawDel), ctx, del)
}

// RawScan mocks base method
func (m *MockClient) RawScan(ctx context.Context, scan *hrpc.Scan) (hrpc.Scanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawScan", ctx, scan)
	ret0, _ := ret[0].(hrpc.Scanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawScan indicates an expected call of RawScan
func (mr *MockClientMockRecorder) RawScan(ctx, scan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawScan", reflect.TypeOf((*MockClient)(nil).RawScan), ctx, scan)
}

// RawAppend mocks base method
func (m *MockClient) RawAppend(ctx context.Context, a *hrpc.Mutate) (*hrpc.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawAppend", ctx, a)
	ret0, _ := ret[0].(*hrpc.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawAppend indicates an expected call of RawAppend
func (mr *MockClientMockRecorder) RawAppend(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawAppend", reflect.TypeOf((*MockClient)(nil).RawAppend), ctx, a)
}

// RawInc mocks base method
func (m *MockClient) RawInc(ctx context.Context, inc *hrpc.Mutate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawInc", ctx, inc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawInc indicates an expected call of RawInc
func (mr *MockClientMockRecorder) RawInc(ctx, inc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawInc", reflect.TypeOf((*MockClient)(nil).RawInc), ctx, inc)
}

// RawCheckAndPut mocks base method
func (m *MockClient) RawCheckAndPut(ctx context.Context, put *hrpc.Mutate, family, qualifier string, expectedValue []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawCheckAndPut", ctx, put, family, qualifier, expectedValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawCheckAndPut indicates an expected call of RawCheckAndPut
func (mr *MockClientMockRecorder) RawCheckAndPut(ctx, put, family, qualifier, expectedValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawCheckAndPut", reflect.TypeOf((*MockClient)(nil).RawCheckAndPut), ctx, put, family, qualifier, expectedValue)
}

// RawClose mocks base method
func (m *MockClient) RawClose(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClose", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawClose indicates an expected call of RawClose
func (mr *MockClientMockRecorder) RawClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClose", reflect.TypeOf((*MockClient)(nil).RawClose), ctx)
}
