syntax = "proto3";
// package code generated by Rick  DO NOT EDIT.
package trpc.trpcdatabase.goredisv2;
// code generated by Rick  DO NOT EDIT.
option java_package         = "com.tencent.trpcprotocol.trpcdatabase.goredis.goredis";
option java_multiple_files  = false;
option java_outer_classname = "goredis";
// code generated by Rick  DO NOT EDIT.
option go_package = "trpc.group/trpc-go/trpc-database/goredis/internal/proto";
// It is recommended to use the Google protobuf specification and follow the PB syntax check
// Google protobuf specification address: https://developers.google.com/protocol-buffers/docs/style
// Proto format check (Tencent) includes: Google protobuf specification and data validation check

// google/protobuf/any.proto is deprecated
// any strongly depends on package type.googleapis.com/_packagename_._messagename_.
// https://developers.google.com/protocol-buffers/docs/proto3#any

// tRPC-Go data verification module (**remove comments and use**)
// Turning on data verification in Proto can not only reduce the amount of code writing,
// but also prevent about 75% of security risks
// import "validate.proto";
// import "trpc.proto";

message RedCronJob {
  int64 next_time = 1;  // The time of the next execution.
  string spec     = 2;  // cron sepc timing description text,
                       // which solves the bug that the spec cannot take effect immediately after modification.
}

// QueryOptions url query field.
message QueryOptions {
  // Whether it is a proxy mode, mainly for compatibility with istore, ckv+, Tencent Cloud redis l5 version.
  bool is_proxy = 1 ;
  // Whether to enable context timeout, it is enabled by default.
  bool context_timeout_enabled = 2;
  // Sentry mode, host name. The sentinel master name. Only failover clients.
  string master_name = 4;
  // will execute the `CLIENT SETNAME ClientName` command for each conn.
  string client_name = 5;
  // Maximum number of retries before giving up.
  // Default is 3 retries; -1 (not 0) disables retries.
  int64 max_retries = 6;
  // Minimum backoff between each retry.
  // Default is 8 milliseconds; -1 disables backoff.
  // In milliseconds.
  int64 min_retry_backoff = 7;
  // Maximum backoff between each retry.
  // Default is 512 milliseconds; -1 disables backoff.
  // In milliseconds.
  int64 max_retry_backoff = 8;
  // Dial timeout for establishing new connections.
  // Default is 5 seconds.
  // In milliseconds.
  int64 dial_timeout = 9;
  // Timeout for socket reads. If reached, commands will fail
  // with a timeout instead of blocking. Supported values:
  //   - `0` - default timeout (3 seconds).
  //   - `-1` - no timeout (block indefinitely).
  //   - `-2` - disables SetReadDeadline calls completely.
  // In milliseconds.
  int64 read_timeout = 10;
  // Timeout for socket writes. If reached, commands will fail
  // with a timeout instead of blocking.  Supported values:
  //   - `0` - default timeout (3 seconds).
  //   - `-1` - no timeout (block indefinitely).
  //   - `-2` - disables SetWriteDeadline calls completely.
  // In milliseconds.
  int64 write_timeout = 11;
  // Type of connection pool.
  // true for FIFO pool, false for LIFO pool.
  // Note that FIFO has slightly higher overhead compared to LIFO,
  // but it helps closing idle connections faster reducing the pool size.
  bool pool_fifo = 12;
  // Maximum number of socket connections.
  // Default is 250 connections per every available CPU as reported by runtime.GOMAXPROCS.
  int64 pool_size = 13;
  // Amount of time client waits for connection if all connections
  // are busy before returning an error.
  // Default is ReadTimeout + 1 second.
  int64 pool_timeout = 14;
  // Minimum number of idle connections which is useful when establishing
  // new connection is slow.
  int64 min_idle_conns = 15;
  // Maximum number of idle connections.
  int64 max_idle_conns = 16;
  // ConnMaxIdleTime is the maximum amount of time a connection may be idle.
  // Should be less than server's timeout.
  //
  // Expired connections may be closed lazily before reuse.
  // If d <= 0, connections are not closed due to a connection's idle time.
  //
  // Default is 30 minutes. -1 disables idle timeout check.
  // In milliseconds.
  int64 conn_max_idle_time= 17;
  // ConnMaxLifetime is the maximum amount of time a connection may be reused.
  //
  // Expired connections may be closed lazily before reuse.
  // If <= 0, connections are not closed due to a connection's age.
  //
  // Default is to not close idle connections.
  int64 conn_max_lifetime= 19;
  // The maximum number of retries before giving up. Command is retried
  // on network errors and MOVED/ASK redirects.
  // Default is 3 retries.
  int64 max_redirects = 20;
  // Enables read-only commands on slave nodes.
  bool read_only = 21;
  // Allows routing read-only commands to the closest master or slave node.
  // It automatically enables ReadOnly.
  bool route_by_latency = 22;
  // Allows routing read-only commands to the random master or slave node.
  // It automatically enables ReadOnly.
  bool route_randomly = 23;
}
