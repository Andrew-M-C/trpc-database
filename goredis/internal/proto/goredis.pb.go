// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: goredis.proto

// package code generated by Rick  DO NOT EDIT.

package proto

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedCronJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextTime int64  `protobuf:"varint,1,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"` // The time of the next execution.
	Spec     string `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`                          // cron sepc timing description text,
	// which solves the bug that the spec cannot take effect immediately after modification.
}

func (x *RedCronJob) Reset() {
	*x = RedCronJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goredis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedCronJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedCronJob) ProtoMessage() {}

func (x *RedCronJob) ProtoReflect() protoreflect.Message {
	mi := &file_goredis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedCronJob.ProtoReflect.Descriptor instead.
func (*RedCronJob) Descriptor() ([]byte, []int) {
	return file_goredis_proto_rawDescGZIP(), []int{0}
}

func (x *RedCronJob) GetNextTime() int64 {
	if x != nil {
		return x.NextTime
	}
	return 0
}

func (x *RedCronJob) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

// QueryOptions url query fieldsã€‚
type QueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether it is a proxy mode, mainly for compatibility with istore, ckv+, Tencent Cloud redis l5 version.
	IsProxy bool `protobuf:"varint,1,opt,name=is_proxy,json=isProxy,proto3" json:"is_proxy,omitempty"`
	// Whether to enable context timeout, it is enabled by default.
	ContextTimeoutEnabled bool `protobuf:"varint,2,opt,name=context_timeout_enabled,json=contextTimeoutEnabled,proto3" json:"context_timeout_enabled,omitempty"`
	// Sentry mode, host name. The sentinel master name. Only failover clients.
	MasterName string `protobuf:"bytes,4,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	// will execute the `CLIENT SETNAME ClientName` command for each conn.
	ClientName string `protobuf:"bytes,5,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Maximum number of retries before giving up.
	// Default is 3 retries; -1 (not 0) disables retries.
	MaxRetries int64 `protobuf:"varint,6,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Minimum backoff between each retry.
	// Default is 8 milliseconds; -1 disables backoff.
	// In milliseconds.
	MinRetryBackoff int64 `protobuf:"varint,7,opt,name=min_retry_backoff,json=minRetryBackoff,proto3" json:"min_retry_backoff,omitempty"`
	// Maximum backoff between each retry.
	// Default is 512 milliseconds; -1 disables backoff.
	// In milliseconds.
	MaxRetryBackoff int64 `protobuf:"varint,8,opt,name=max_retry_backoff,json=maxRetryBackoff,proto3" json:"max_retry_backoff,omitempty"`
	// Dial timeout for establishing new connections.
	// Default is 5 seconds.
	// In milliseconds.
	DialTimeout int64 `protobuf:"varint,9,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	// Timeout for socket reads. If reached, commands will fail
	// with a timeout instead of blocking. Supported values:
	//   - `0` - default timeout (3 seconds).
	//   - `-1` - no timeout (block indefinitely).
	//   - `-2` - disables SetReadDeadline calls completely.
	//
	// In milliseconds.
	ReadTimeout int64 `protobuf:"varint,10,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	// Timeout for socket writes. If reached, commands will fail
	// with a timeout instead of blocking.  Supported values:
	//   - `0` - default timeout (3 seconds).
	//   - `-1` - no timeout (block indefinitely).
	//   - `-2` - disables SetWriteDeadline calls completely.
	//
	// In milliseconds.
	WriteTimeout int64 `protobuf:"varint,11,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	// Type of connection pool.
	// true for FIFO pool, false for LIFO pool.
	// Note that FIFO has slightly higher overhead compared to LIFO,
	// but it helps closing idle connections faster reducing the pool size.
	PoolFifo bool `protobuf:"varint,12,opt,name=pool_fifo,json=poolFifo,proto3" json:"pool_fifo,omitempty"`
	// Maximum number of socket connections.
	// Default is 250 connections per every available CPU as reported by runtime.GOMAXPROCS.
	PoolSize int64 `protobuf:"varint,13,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	// Amount of time client waits for connection if all connections
	// are busy before returning an error.
	// Default is ReadTimeout + 1 second.
	PoolTimeout int64 `protobuf:"varint,14,opt,name=pool_timeout,json=poolTimeout,proto3" json:"pool_timeout,omitempty"`
	// Minimum number of idle connections which is useful when establishing
	// new connection is slow.
	MinIdleConns int64 `protobuf:"varint,15,opt,name=min_idle_conns,json=minIdleConns,proto3" json:"min_idle_conns,omitempty"`
	// Maximum number of idle connections.
	MaxIdleConns int64 `protobuf:"varint,16,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty"`
	// ConnMaxIdleTime is the maximum amount of time a connection may be idle.
	// Should be less than server's timeout.
	//
	// Expired connections may be closed lazily before reuse.
	// If d <= 0, connections are not closed due to a connection's idle time.
	//
	// Default is 30 minutes. -1 disables idle timeout check.
	// In milliseconds.
	ConnMaxIdleTime int64 `protobuf:"varint,17,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"`
	// ConnMaxLifetime is the maximum amount of time a connection may be reused.
	//
	// Expired connections may be closed lazily before reuse.
	// If <= 0, connections are not closed due to a connection's age.
	//
	// Default is to not close idle connections.
	ConnMaxLifetime int64 `protobuf:"varint,19,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`
	// The maximum number of retries before giving up. Command is retried
	// on network errors and MOVED/ASK redirects.
	// Default is 3 retries.
	MaxRedirects int64 `protobuf:"varint,20,opt,name=max_redirects,json=maxRedirects,proto3" json:"max_redirects,omitempty"`
	// Enables read-only commands on slave nodes.
	ReadOnly bool `protobuf:"varint,21,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// Allows routing read-only commands to the closest master or slave node.
	// It automatically enables ReadOnly.
	RouteByLatency bool `protobuf:"varint,22,opt,name=route_by_latency,json=routeByLatency,proto3" json:"route_by_latency,omitempty"`
	// Allows routing read-only commands to the random master or slave node.
	// It automatically enables ReadOnly.
	RouteRandomly bool `protobuf:"varint,23,opt,name=route_randomly,json=routeRandomly,proto3" json:"route_randomly,omitempty"`
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goredis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_goredis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_goredis_proto_rawDescGZIP(), []int{1}
}

func (x *QueryOptions) GetIsProxy() bool {
	if x != nil {
		return x.IsProxy
	}
	return false
}

func (x *QueryOptions) GetContextTimeoutEnabled() bool {
	if x != nil {
		return x.ContextTimeoutEnabled
	}
	return false
}

func (x *QueryOptions) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *QueryOptions) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *QueryOptions) GetMaxRetries() int64 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *QueryOptions) GetMinRetryBackoff() int64 {
	if x != nil {
		return x.MinRetryBackoff
	}
	return 0
}

func (x *QueryOptions) GetMaxRetryBackoff() int64 {
	if x != nil {
		return x.MaxRetryBackoff
	}
	return 0
}

func (x *QueryOptions) GetDialTimeout() int64 {
	if x != nil {
		return x.DialTimeout
	}
	return 0
}

func (x *QueryOptions) GetReadTimeout() int64 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *QueryOptions) GetWriteTimeout() int64 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

func (x *QueryOptions) GetPoolFifo() bool {
	if x != nil {
		return x.PoolFifo
	}
	return false
}

func (x *QueryOptions) GetPoolSize() int64 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *QueryOptions) GetPoolTimeout() int64 {
	if x != nil {
		return x.PoolTimeout
	}
	return 0
}

func (x *QueryOptions) GetMinIdleConns() int64 {
	if x != nil {
		return x.MinIdleConns
	}
	return 0
}

func (x *QueryOptions) GetMaxIdleConns() int64 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *QueryOptions) GetConnMaxIdleTime() int64 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *QueryOptions) GetConnMaxLifetime() int64 {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return 0
}

func (x *QueryOptions) GetMaxRedirects() int64 {
	if x != nil {
		return x.MaxRedirects
	}
	return 0
}

func (x *QueryOptions) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *QueryOptions) GetRouteByLatency() bool {
	if x != nil {
		return x.RouteByLatency
	}
	return false
}

func (x *QueryOptions) GetRouteRandomly() bool {
	if x != nil {
		return x.RouteRandomly
	}
	return false
}

var File_goredis_proto protoreflect.FileDescriptor

var file_goredis_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x67, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x76, 0x32, 0x22, 0x3d, 0x0a, 0x0a,
	0x52, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9c, 0x06, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x46, 0x69,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x42, 0x7f, 0x0a, 0x35, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x67, 0x6f, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x42, 0x07, 0x67, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x00, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x2e, 0x77, 0x6f, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x70, 0x63,
	0x2d, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x67, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_goredis_proto_rawDescOnce sync.Once
	file_goredis_proto_rawDescData = file_goredis_proto_rawDesc
)

func file_goredis_proto_rawDescGZIP() []byte {
	file_goredis_proto_rawDescOnce.Do(func() {
		file_goredis_proto_rawDescData = protoimpl.X.CompressGZIP(file_goredis_proto_rawDescData)
	})
	return file_goredis_proto_rawDescData
}

var file_goredis_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_goredis_proto_goTypes = []interface{}{
	(*RedCronJob)(nil),   // 0: trpc.trpcdatabase.goredisv2.RedCronJob
	(*QueryOptions)(nil), // 1: trpc.trpcdatabase.goredisv2.QueryOptions
}
var file_goredis_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_goredis_proto_init() }
func file_goredis_proto_init() {
	if File_goredis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goredis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedCronJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goredis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goredis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goredis_proto_goTypes,
		DependencyIndexes: file_goredis_proto_depIdxs,
		MessageInfos:      file_goredis_proto_msgTypes,
	}.Build()
	File_goredis_proto = out.File
	file_goredis_proto_rawDesc = nil
	file_goredis_proto_goTypes = nil
	file_goredis_proto_depIdxs = nil
}
