// Code generated by MockGen. DO NOT EDIT.
// Source: redlock.go

// Package mockredlock is a generated GoMock package.
package mockredlock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redlock "trpc.group/trpc-go/trpc-database/goredis/redlock"
)

// MockRedLocker is a mock of RedLocker interface.
type MockRedLocker struct {
	ctrl     *gomock.Controller
	recorder *MockRedLockerMockRecorder
}

// MockRedLockerMockRecorder is the mock recorder for MockRedLocker.
type MockRedLockerMockRecorder struct {
	mock *MockRedLocker
}

// NewMockRedLocker creates a new mock instance.
func NewMockRedLocker(ctrl *gomock.Controller) *MockRedLocker {
	mock := &MockRedLocker{ctrl: ctrl}
	mock.recorder = &MockRedLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedLocker) EXPECT() *MockRedLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockRedLocker) Lock(ctx context.Context, key string, opts ...redlock.Option) (redlock.Mutex, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lock", varargs...)
	ret0, _ := ret[0].(redlock.Mutex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockRedLockerMockRecorder) Lock(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockRedLocker)(nil).Lock), varargs...)
}

// TryLock mocks base method.
func (m *MockRedLocker) TryLock(ctx context.Context, key string, opts ...redlock.Option) (redlock.Mutex, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TryLock", varargs...)
	ret0, _ := ret[0].(redlock.Mutex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockRedLockerMockRecorder) TryLock(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockRedLocker)(nil).TryLock), varargs...)
}
