// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mockcos is a generated GoMock package.
package mockcos

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cos "trpc.group/trpc-go/trpc-database/cos"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CompleteMultipartUpload mocks base method.
func (m *MockClient) CompleteMultipartUpload(ctx context.Context, key string, completeMultipartUpload cos.CompleteMultipartUpload, opts ...cos.Option) (*cos.CompleteMultipartUploadResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, completeMultipartUpload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", varargs...)
	ret0, _ := ret[0].(*cos.CompleteMultipartUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockClientMockRecorder) CompleteMultipartUpload(ctx, key, completeMultipartUpload interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, completeMultipartUpload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockClient)(nil).CompleteMultipartUpload), varargs...)
}

// CopyObject mocks base method.
func (m *MockClient) CopyObject(ctx context.Context, srcURI, dstURI string, headers map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObject", ctx, srcURI, dstURI, headers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockClientMockRecorder) CopyObject(ctx, srcURI, dstURI, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockClient)(nil).CopyObject), ctx, srcURI, dstURI, headers)
}

// DelMultipleObjects mocks base method.
func (m *MockClient) DelMultipleObjects(ctx context.Context, opt *cos.ObjectDeleteMultiOptions) (*cos.ObjectDeleteMultiResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelMultipleObjects", ctx, opt)
	ret0, _ := ret[0].(*cos.ObjectDeleteMultiResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelMultipleObjects indicates an expected call of DelMultipleObjects.
func (mr *MockClientMockRecorder) DelMultipleObjects(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelMultipleObjects", reflect.TypeOf((*MockClient)(nil).DelMultipleObjects), ctx, opt)
}

// DelObject mocks base method.
func (m *MockClient) DelObject(ctx context.Context, uri string, opts ...cos.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uri}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelObject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelObject indicates an expected call of DelObject.
func (mr *MockClientMockRecorder) DelObject(ctx, uri interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uri}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelObject", reflect.TypeOf((*MockClient)(nil).DelObject), varargs...)
}

// GenAuthorization mocks base method.
func (m *MockClient) GenAuthorization(ctx context.Context, method, uri string, params, headers map[string]string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenAuthorization", ctx, method, uri, params, headers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GenAuthorization indicates an expected call of GenAuthorization.
func (mr *MockClientMockRecorder) GenAuthorization(ctx, method, uri, params, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenAuthorization", reflect.TypeOf((*MockClient)(nil).GenAuthorization), ctx, method, uri, params, headers)
}

// GetBucket mocks base method.
func (m *MockClient) GetBucket(ctx context.Context, opts ...cos.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucket", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucket indicates an expected call of GetBucket.
func (mr *MockClientMockRecorder) GetBucket(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucket", reflect.TypeOf((*MockClient)(nil).GetBucket), varargs...)
}

// GetImageWithTextWaterMask mocks base method.
func (m *MockClient) GetImageWithTextWaterMask(ctx context.Context, key string, waterMask cos.TextWaterMaskParams, opts ...cos.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, waterMask}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImageWithTextWaterMask", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageWithTextWaterMask indicates an expected call of GetImageWithTextWaterMask.
func (mr *MockClientMockRecorder) GetImageWithTextWaterMask(ctx, key, waterMask interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, waterMask}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageWithTextWaterMask", reflect.TypeOf((*MockClient)(nil).GetImageWithTextWaterMask), varargs...)
}

// GetObject mocks base method.
func (m *MockClient) GetObject(ctx context.Context, uri string, opts ...cos.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uri}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockClientMockRecorder) GetObject(ctx, uri interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uri}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockClient)(nil).GetObject), varargs...)
}

// GetObjectVersions mocks base method.
func (m *MockClient) GetObjectVersions(ctx context.Context, opts ...cos.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectVersions", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectVersions indicates an expected call of GetObjectVersions.
func (mr *MockClientMockRecorder) GetObjectVersions(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectVersions", reflect.TypeOf((*MockClient)(nil).GetObjectVersions), varargs...)
}

// GetObjectWithHead mocks base method.
func (m *MockClient) GetObjectWithHead(ctx context.Context, uri string, headers map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectWithHead", ctx, uri, headers)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectWithHead indicates an expected call of GetObjectWithHead.
func (mr *MockClientMockRecorder) GetObjectWithHead(ctx, uri, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectWithHead", reflect.TypeOf((*MockClient)(nil).GetObjectWithHead), ctx, uri, headers)
}

// GetPreSignedURL mocks base method.
func (m *MockClient) GetPreSignedURL(ctx context.Context, name, method string, expired time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSignedURL", ctx, name, method, expired)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreSignedURL indicates an expected call of GetPreSignedURL.
func (mr *MockClientMockRecorder) GetPreSignedURL(ctx, name, method, expired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSignedURL", reflect.TypeOf((*MockClient)(nil).GetPreSignedURL), ctx, name, method, expired)
}

// HeadBucket mocks base method.
func (m *MockClient) HeadBucket(ctx context.Context, opts ...cos.Option) (http.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBucket", varargs...)
	ret0, _ := ret[0].(http.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBucket indicates an expected call of HeadBucket.
func (mr *MockClientMockRecorder) HeadBucket(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBucket", reflect.TypeOf((*MockClient)(nil).HeadBucket), varargs...)
}

// HeadObject mocks base method.
func (m *MockClient) HeadObject(ctx context.Context, uri string, opts ...cos.Option) (http.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uri}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadObject", varargs...)
	ret0, _ := ret[0].(http.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject.
func (mr *MockClientMockRecorder) HeadObject(ctx, uri interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uri}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockClient)(nil).HeadObject), varargs...)
}

// InitMultipartUpload mocks base method.
func (m *MockClient) InitMultipartUpload(ctx context.Context, key string, opts ...cos.Option) (*cos.InitiateMultipartUploadResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitMultipartUpload", varargs...)
	ret0, _ := ret[0].(*cos.InitiateMultipartUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitMultipartUpload indicates an expected call of InitMultipartUpload.
func (mr *MockClientMockRecorder) InitMultipartUpload(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMultipartUpload", reflect.TypeOf((*MockClient)(nil).InitMultipartUpload), varargs...)
}

// PutObject mocks base method.
func (m *MockClient) PutObject(ctx context.Context, content []byte, uri string, opts ...cos.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, content, uri}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockClientMockRecorder) PutObject(ctx, content, uri interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, content, uri}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockClient)(nil).PutObject), varargs...)
}

// PutObjectACLWithHead mocks base method.
func (m *MockClient) PutObjectACLWithHead(ctx context.Context, uri string, headers map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectACLWithHead", ctx, uri, headers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectACLWithHead indicates an expected call of PutObjectACLWithHead.
func (mr *MockClientMockRecorder) PutObjectACLWithHead(ctx, uri, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectACLWithHead", reflect.TypeOf((*MockClient)(nil).PutObjectACLWithHead), ctx, uri, headers)
}

// PutObjectWithHead mocks base method.
func (m *MockClient) PutObjectWithHead(ctx context.Context, content []byte, uri string, headers map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectWithHead", ctx, content, uri, headers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectWithHead indicates an expected call of PutObjectWithHead.
func (mr *MockClientMockRecorder) PutObjectWithHead(ctx, content, uri, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectWithHead", reflect.TypeOf((*MockClient)(nil).PutObjectWithHead), ctx, content, uri, headers)
}

// SendRequest mocks base method.
func (m *MockClient) SendRequest(ctx context.Context, method, uri string, headers map[string]string, data []byte) (http.Header, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, method, uri, headers, data)
	ret0, _ := ret[0].(http.Header)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockClientMockRecorder) SendRequest(ctx, method, uri, headers, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockClient)(nil).SendRequest), ctx, method, uri, headers, data)
}

// UploadPart mocks base method.
func (m *MockClient) UploadPart(ctx context.Context, key string, uploadPart cos.UploadPart, opts ...cos.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, uploadPart}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPart", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockClientMockRecorder) UploadPart(ctx, key, uploadPart interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, uploadPart}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockClient)(nil).UploadPart), varargs...)
}
