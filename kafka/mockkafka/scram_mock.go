// Code generated by MockGen. DO NOT EDIT.
// Source: scram.go

// Package mockkafka is a generated GoMock package.
package mockkafka

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientConversation is a mock of ClientConversation interface.
type MockClientConversation struct {
	ctrl     *gomock.Controller
	recorder *MockClientConversationMockRecorder
}

// MockClientConversationMockRecorder is the mock recorder for MockClientConversation.
type MockClientConversationMockRecorder struct {
	mock *MockClientConversation
}

// NewMockClientConversation creates a new mock instance.
func NewMockClientConversation(ctrl *gomock.Controller) *MockClientConversation {
	mock := &MockClientConversation{ctrl: ctrl}
	mock.recorder = &MockClientConversationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConversation) EXPECT() *MockClientConversationMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockClientConversation) Done() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockClientConversationMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockClientConversation)(nil).Done))
}

// Step mocks base method.
func (m *MockClientConversation) Step(challenge string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step", challenge)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Step indicates an expected call of Step.
func (mr *MockClientConversationMockRecorder) Step(challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockClientConversation)(nil).Step), challenge)
}
